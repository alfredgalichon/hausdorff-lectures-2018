source('C:/Users/Alfred/Dropbox/AGCloud/Programming/R/TraME/installAndLaunch_TraME.R')
require('Matrix')
require('gurobi')
require('gurobi')
require('clue')
n=1000
seed=777
set.seed(seed)
ptm <- proc.time()
Phi=matrix(runif(n*n),nrow=n)
p = rep(1,n)
q = rep(1,n)
N = dim(Phi)[1]
M = dim(Phi)[2]
c = c(Phi)
A1 = kronecker(matrix(1,1,M),sparseMatrix(1:N,1:N))
A2 = kronecker(sparseMatrix(1:M,1:M),matrix(1,1,N))
A = rbind2(A1,A2)
d = c(p,q)
result   = gurobi ( list(A=A,obj=c,modelsense="max",rhs=d,sense="="), params=list(OutputFlag=0) )
if (result$status=="OPTIMAL") {
pi = matrix(result$x,nrow=N)
u = result$pi[1:N]
v = result$pi[(N+1):(N+M)]
val = result$objval
} else {stop("optimization problem with Gurobi.") }
time <- proc.time()-ptm
source('C:/Users/Alfred/Dropbox/AGCloud/Courses/2017_TSE_OptimalTransport/ProgrammingExamples/PE3.1-OptimalAssignment/optimalAssignment.R')
source('C:/Users/Alfred/Dropbox/AGCloud/Courses/2017_TSE_OptimalTransport/ProgrammingExamples/PE8.1-ShortestPath/shortestPath.R')
n=1000
require('Matrix')
require('gurobi')
require('clue')
n=1000
seed=777
set.seed(seed)
ptm <- proc.time()
Phi=matrix(runif(n*n),nrow=n)
p = rep(1,n)
q = rep(1,n)
N = dim(Phi)[1]
source('C:/Users/Alfred/Dropbox/AGResearch_in_progress/_ImperialLectures/ProgrammingExamples/PE3.1-OptimalAssignment/optimalAssignment.R')
source('C:/Users/Alfred/Dropbox/AGResearch_in_progress/_ImperialLectures/ProgrammingExamples/PE8.1-ShortestPath/shortestPath.R')
